services:
  #  mysql:
  #    image: mysql:9.0.0
  #    container_name: mysql
  #    cap_add:
  #      - SYS_NICE
  #    restart: always
  #    environment:
  #      - MYSQL_DATABASE=testdb
  #      - MYSQL_ROOT_PASSWORD=password
  #    ports:
  #      - '3306:3306'
  #    volumes:
  #      - mysql_data:/var/lib/mysql
  #      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
  #    networks:
  #      - default
  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: hoangvu
      POSTGRES_PASSWORD: 321
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5431:5432'
    networks:
      - default

  backend-service:
    container_name: backend-service
    image: nonghoangvu/backend-service:1.0.0-48
    #    platform: linux/amd64
    #    build:
    #      context: ./
    #      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      DATABASE_HOST: host.docker.internal
      DATABASE_PORT: 5431
      DATABASE_USERNAME: hoangvu
      DATABASE_PASSWORD: 321
      LOGSTASH_HOST: host.docker.internal:5600
    networks:
      - default

  elastic-search:
    image: elasticsearch:7.14.1
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    networks:
      - default

  kibana:
    image: kibana:7.14.1
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic-search:9200
    networks:
      - default

  logstash:
    image: logstash:7.14.1
    container_name: logstash
    restart: always
    ports:
      - "5600:5600" # Socket port
      - "5044:5044"
    #      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elastic-search:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment: # account: grafana/password
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - '3000:3000'
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

#  jenkins:
#    image: jenkins/jenkins:lts
#    privileged: true
#    user: root
#    ports:
#      - '7080:8080'
#      - '50000:50000'
#    container_name: jenkins
#    volumes:
#      - ~/jenkins-data:/var/jenkins_home
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /usr/local/bin/docker:/usr/local/bin/docker
networks:
  default:
    name: backend-service

volumes:
  #  mysql_data:
  postgres:
  grafana: